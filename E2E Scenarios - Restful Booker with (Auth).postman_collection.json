{
	"info": {
		"_postman_id": "f53b8ba8-3e35-4865-9ac1-512ab5b1e102",
		"name": "E2E Scenarios - Restful Booker with (Auth)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42531135",
		"_collection_link": "https://prasadapiautoamtion.postman.co/workspace/2e8c40ac-d74a-40a1-864e-f014dc880029/collection/42531135-f53b8ba8-3e35-4865-9ac1-512ab5b1e102?action=share&source=collection_link&creator=42531135"
	},
	"item": [
		{
			"name": "Healthcheck",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Check if the response status code is 201\r",
							"pm.test(\"Health check - API is up and running\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Verify response time is within acceptable limits (e.g., 500ms)\r",
							"pm.test(\"Response time is less than 900ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(900);\r",
							"});\r",
							"\r",
							"// Validate response body (should be \"Created\" as per API documentation)\r",
							"pm.test(\"Response body contains expected message\", function () {\r",
							"    pm.expect(pm.response.text()).to.equal(\"Created\");\r",
							"});\r",
							"\r",
							"// Check if Content-Type header is present and correct\r",
							"pm.test(\"Content-Type is application/json\", function () {\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/ping",
					"host": [
						"{{url}}"
					],
					"path": [
						"ping"
					]
				},
				"description": "Generated from cURL: curl -i https://restful-booker.herokuapp.com/ping"
			},
			"response": []
		},
		{
			"name": "GetBookingIds",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ✅ Check if the status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// ✅ Verify that response is an array\r",
							"pm.test(\"Response is an array\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\");\r",
							"});\r",
							"\r",
							"// ✅ Check if at least one booking ID is present\r",
							"pm.test(\"Response contains at least one booking ID\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"// ✅ Validate that each entry has a 'bookingid' key and is a number\r",
							"pm.test(\"Each entry should have a valid booking ID\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    jsonData.forEach(function (booking) {\r",
							"        pm.expect(booking).to.have.property(\"bookingid\");\r",
							"        pm.expect(booking.bookingid).to.be.a(\"number\");\r",
							"        pm.expect(booking.bookingid).to.be.greaterThan(0);\r",
							"    });\r",
							"});\r",
							"\r",
							"// ✅ Store the first booking ID for future use in environment variables\r",
							"if (pm.response.json().length > 0) {\r",
							"    pm.environment.set(\"bookingId\", pm.response.json()[0].bookingid);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://restful-booker.herokuapp.com/booking",
					"protocol": "https",
					"host": [
						"restful-booker",
						"herokuapp",
						"com"
					],
					"path": [
						"booking"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBookingIds by name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ✅ Check if status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// ✅ Verify the response contains booking IDs\r",
							"pm.test(\"Verify Booking IDs exist in response\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"array\"); // Ensure response is an array\r",
							"    pm.expect(jsonData.length).to.be.greaterThan(0); // Ensure at least one booking exists\r",
							"    pm.expect(jsonData[0]).to.have.property(\"bookingid\"); // Ensure booking ID is present\r",
							"});\r",
							"\r",
							"// ✅ Store first booking ID for future requests\r",
							"if (pm.response.json().length > 0) {\r",
							"    pm.environment.set(\"bookingId\", pm.response.json()[0].bookingid);\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/booking?firstname=Jim&lastname=Brown",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking"
					],
					"query": [
						{
							"key": "firstname",
							"value": "Mark",
							"disabled": true
						},
						{
							"key": "lastname",
							"value": "Smith",
							"disabled": true
						},
						{
							"key": "firstname",
							"value": "Jim"
						},
						{
							"key": "lastname",
							"value": "Brown"
						}
					]
				},
				"description": "Generated from cURL: curl -i https://restful-booker.herokuapp.com/booking?firstname=sally&lastname=brown"
			},
			"response": []
		},
		{
			"name": "GetBookingIds by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ✅ Check if the status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// ✅ Verify that booking ID is not null or undefined\r",
							"pm.test(\"Verify Booking ID is present\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.bookingid).to.exist;  // Ensure booking ID exists\r",
							"    pm.expect(jsonData.bookingid).to.be.a(\"number\"); // Ensure booking ID is a number\r",
							"    pm.expect(jsonData.bookingid).to.be.greaterThan(0); // Ensure booking ID is greater than zero\r",
							"});\r",
							"\r",
							"// ✅ Store the booking ID in an environment variable\r",
							"pm.environment.set(\"bookingId\", pm.response.json().bookingid);\r",
							"\r",
							"// ✅ Verify response has 'firstname' and matches the expected value\r",
							"pm.test(\"Verify First Name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.firstname).to.eql(\"Jim\");\r",
							"});\r",
							"\r",
							"// ✅ Verify response has 'lastname' and matches the expected value\r",
							"pm.test(\"Verify Last Name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.lastname).to.eql(\"Brown\");\r",
							"});\r",
							"\r",
							"// ✅ Verify other booking details\r",
							"pm.test(\"Verify Other Booking Details\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.totalprice).to.eql(111);\r",
							"    pm.expect(jsonData.depositpaid).to.eql(true);\r",
							"    pm.expect(jsonData.additionalneeds).to.eql(\"Breakfast\");\r",
							"});\r",
							"\r",
							"// ✅ Verify that 'bookingdates' contains correct 'checkin' and 'checkout' dates\r",
							"pm.test(\"Verify Booking Dates\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.bookingdates.checkin).to.eql(\"2018-01-01\");\r",
							"    pm.expect(jsonData.bookingdates.checkout).to.eql(\"2019-01-01\");\r",
							"});\r",
							"\r",
							"// ✅ Ensure the response contains all required keys\r",
							"pm.test(\"Response contains all necessary fields\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.keys([\"firstname\", \"lastname\", \"totalprice\", \"depositpaid\", \"bookingdates\", \"additionalneeds\"]);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/booking/{{bookingId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking",
						"{{bookingId}}"
					],
					"query": [
						{
							"key": "firstname",
							"value": "Mark",
							"disabled": true
						},
						{
							"key": "lastname",
							"value": "Smith",
							"disabled": true
						}
					]
				},
				"description": "Generated from cURL: curl -i https://restful-booker.herokuapp.com/booking?firstname=sally&lastname=brown"
			},
			"response": []
		},
		{
			"name": "CreateBooking",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ✅ Check if the status code is 200 (or 201 if applicable)\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// ✅ Verify that the response contains 'bookingid' and it is not null\r",
							"pm.test(\"Booking ID is present and not null\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"bookingid\");\r",
							"    pm.expect(jsonData.bookingid).to.not.be.null;\r",
							"    pm.environment.set(\"bookingId\", jsonData.bookingid); // Store bookingId in environment variable\r",
							"});\r",
							"\r",
							"// ✅ Verify that 'firstname' matches the expected value\r",
							"pm.test(\"Verify First Name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.booking.firstname).to.eql(\"Jim\");\r",
							"});\r",
							"\r",
							"// ✅ Verify that 'lastname' matches the expected value\r",
							"pm.test(\"Verify Last Name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.booking.lastname).to.eql(\"Brown\");\r",
							"});\r",
							"\r",
							"// ✅ Verify 'totalprice', 'depositpaid', and 'additionalneeds'\r",
							"pm.test(\"Verify Other Booking Details\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.booking.totalprice).to.eql(111);\r",
							"    pm.expect(jsonData.booking.depositpaid).to.eql(true);\r",
							"    pm.expect(jsonData.booking.additionalneeds).to.eql(\"Breakfast\");\r",
							"});\r",
							"\r",
							"// ✅ Verify 'checkin' and 'checkout' dates\r",
							"pm.test(\"Verify Booking Dates\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.booking.bookingdates.checkin).to.eql(\"2018-01-01\");\r",
							"    pm.expect(jsonData.booking.bookingdates.checkout).to.eql(\"2019-01-01\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"Jim\",\r\n    \"lastname\": \"Brown\",\r\n    \"totalprice\": 111,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2018-01-01\",\r\n        \"checkout\": \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/booking",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking"
					]
				},
				"description": "Generated from cURL: curl -X POST \\\r\n  https://restful-booker.herokuapp.com/booking \\\r\n  -H 'Content-Type: application/json' \\\r\n  -d '{\r\n    \"firstname\" : \"Jim\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}'"
			},
			"response": []
		},
		{
			"name": "UpdateBooking by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ✅ Check if the status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// ✅ Verify that the response body is an object\r",
							"pm.test(\"Response should be a valid JSON object\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"// ✅ Verify that the 'firstname' was updated\r",
							"pm.test(\"Verify First Name was updated\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.firstname).to.eql(\"James\"); // Ensure the first name is updated\r",
							"});\r",
							"\r",
							"// ✅ Verify that 'lastname' remains the same\r",
							"pm.test(\"Verify Last Name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.lastname).to.eql(\"Brown\");\r",
							"});\r",
							"\r",
							"// ✅ Validate other booking details\r",
							"pm.test(\"Verify Other Booking Details\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.totalprice).to.eql(111);\r",
							"    pm.expect(jsonData.depositpaid).to.eql(true);\r",
							"    pm.expect(jsonData.additionalneeds).to.eql(\"Breakfast\");\r",
							"});\r",
							"\r",
							"// ✅ Verify check-in and check-out dates\r",
							"pm.test(\"Verify Booking Dates\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.bookingdates.checkin).to.eql(\"2018-01-01\");\r",
							"    pm.expect(jsonData.bookingdates.checkout).to.eql(\"2019-01-01\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token=abc123"
					},
					{
						"key": "Authorization",
						"value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\": \"Jim\",\r\n    \"lastname\": \"Brown\",\r\n    \"totalprice\": 111,\r\n    \"depositpaid\": true,\r\n    \"bookingdates\": {\r\n        \"checkin\": \"2018-01-01\",\r\n        \"checkout\": \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\": \"Breakfast\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/booking/{{bookingId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking",
						"{{bookingId}}"
					]
				},
				"description": "Generated from cURL: curl -X PUT \\\r\n  https://restful-booker.herokuapp.com/booking/1 \\\r\n  -H 'Content-Type: application/json' \\\r\n  -H 'Accept: application/json' \\\r\n  -H 'Cookie: token=abc123' \\\r\n  -d '{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\",\r\n    \"totalprice\" : 111,\r\n    \"depositpaid\" : true,\r\n    \"bookingdates\" : {\r\n        \"checkin\" : \"2018-01-01\",\r\n        \"checkout\" : \"2019-01-01\"\r\n    },\r\n    \"additionalneeds\" : \"Breakfast\"\r\n}'"
			},
			"response": []
		},
		{
			"name": "PartialUpdateBooking by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ✅ Check if the status code is 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// ✅ Verify that the response body is an object\r",
							"pm.test(\"Response should be a valid JSON object\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.be.an(\"object\");\r",
							"});\r",
							"\r",
							"// ✅ Verify that 'firstname' was updated\r",
							"pm.test(\"Verify First Name was updated\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.firstname).to.eql(\"Ross\"); // Ensure the first name is updated\r",
							"});\r",
							"\r",
							"// ✅ Verify that 'lastname' was updated\r",
							"pm.test(\"Verify Last Name was updated\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.lastname).to.eql(\"Gellar\"); // Ensure the last name is updated\r",
							"});\r",
							"\r",
							"// ✅ Validate that other booking details remain unchanged\r",
							"pm.test(\"Ensure other fields are not changed\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"totalprice\"); // Ensure totalprice still exists\r",
							"    pm.expect(jsonData).to.have.property(\"depositpaid\"); // Ensure depositpaid still exists\r",
							"    pm.expect(jsonData).to.have.property(\"bookingdates\"); // Ensure bookingdates still exists\r",
							"    pm.expect(jsonData).to.have.property(\"additionalneeds\"); // Ensure additionalneeds still exists\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "PATCH",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token=abc123"
					},
					{
						"key": "Authorization",
						"value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstname\" : \"Ross\",\r\n    \"lastname\" : \"Gellar\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/booking/{{bookingId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking",
						"{{bookingId}}"
					]
				},
				"description": "Generated from cURL: curl -X PATCH \\\r\n  https://restful-booker.herokuapp.com/booking/1 \\\r\n  -H 'Content-Type: application/json' \\\r\n  -H 'Accept: application/json' \\\r\n  -H 'Cookie: token=abc123' \\\r\n  -d '{\r\n    \"firstname\" : \"James\",\r\n    \"lastname\" : \"Brown\"\r\n"
			},
			"response": []
		},
		{
			"name": "DeleteBooking by ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// ✅ Check if the status code is 201 (Expected response for deletion)\r",
							"pm.test(\"Status code is 201 - Booking deleted successfully\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// ✅ Verify response body is empty or contains expected message\r",
							"pm.test(\"Response body should be empty\", function () {\r",
							"    pm.expect(pm.response.text()).to.be.empty;\r",
							"});\r",
							"\r",
							"// ✅ Ensure the deleted booking no longer exists\r",
							"pm.test(\"Verify booking is deleted\", function () {\r",
							"    var bookingId = pm.environment.get(\"bookingId\");\r",
							"    \r",
							"    pm.sendRequest({\r",
							"        url: `https://restful-booker.herokuapp.com/booking/${bookingId}`,\r",
							"        method: 'GET'\r",
							"    }, function (err, res) {\r",
							"        pm.test(\"Booking should no longer exist\", function () {\r",
							"            pm.expect(res.status).to.eql(404);\r",
							"        });\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Cookie",
						"value": "token=abc123"
					},
					{
						"key": "Authorization",
						"value": "Basic YWRtaW46cGFzc3dvcmQxMjM=",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/booking/{{bookingId}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"booking",
						"{{bookingId}}"
					]
				},
				"description": "Generated from cURL: curl -X DELETE \\\r\n  https://restful-booker.herokuapp.com/booking/1 \\\r\n  -H 'Content-Type: application/json' \\\r\n  -H 'Cookie: token=abc123'"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://restful-booker.herokuapp.com",
			"type": "string"
		}
	]
}